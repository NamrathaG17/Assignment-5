/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 19:01:44 GMT 2022
 */

package avlTree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import avlTree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2874));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      assertNull(aVLTree_Node1);
      
      aVLTree_Node0.left = null;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = (-3879);
      assertEquals((-3879), aVLTree0.height());
      
      aVLTree_Node0.key = 0;
      assertEquals((-3879), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals((-3879), aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals((-3879), int1);
      assertEquals((-3879), aVLTree0.height());
      assertFalse(int1 == int0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node2);
      assertEquals((-3879), aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node3);
      assertEquals((-3879), aVLTree0.height());
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      
      aVLTree_Node3.right = aVLTree_Node2;
      assertEquals((-3879), aVLTree0.height());
      
      aVLTree_Node3.left = null;
      assertEquals((-3879), aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node3);
      assertEquals((-3878), int2);
      assertEquals((-3879), aVLTree0.height());
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      aVLTree0.delete((-2440));
      assertEquals(0, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(0, int3);
      assertEquals(0, aVLTree0.height());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      aVLTree0.insert((-3878));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node4);
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node4, aVLTree_Node0);
      assertSame(aVLTree_Node4, aVLTree_Node2);
      assertSame(aVLTree_Node4, aVLTree_Node3);
      
      // Undeclared exception!
      aVLTree0.find(2300);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2874));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      assertNull(aVLTree_Node1);
      
      aVLTree_Node0.left = null;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = (-3879);
      assertEquals((-3879), aVLTree0.height());
      
      aVLTree_Node0.key = 0;
      assertEquals((-3879), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals((-3879), aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals((-3879), int1);
      assertEquals((-3879), aVLTree0.height());
      assertFalse(int1 == int0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node2);
      assertEquals((-3879), aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node3);
      assertEquals((-3879), aVLTree0.height());
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      
      aVLTree_Node3.left = aVLTree_Node3;
      assertEquals((-3879), aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node3);
      assertEquals(3878, int2);
      assertEquals((-3879), aVLTree0.height());
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = (-2440);
      aVLTree0.delete(int3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1720);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1720);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-3738));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1650));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-3738));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1466));
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-3738));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals((-1), int1);
      assertEquals(1, aVLTree0.height());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(602);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1021));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int1);
      assertEquals(1, aVLTree0.height());
      assertTrue(int1 == int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(602);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3206);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2747);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(1, int1);
      assertEquals(1, aVLTree0.height());
      assertFalse(int1 == int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1));
      assertNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(841);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(847);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(724);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1636);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-194));
      assertNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node2);
      assertEquals(0, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-657));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-144));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-657));
      assertNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(365);
      assertNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(631);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(2023);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-95));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-95));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-95));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-3077));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(422);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(678);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1494));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1157));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1032);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-204));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-204));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(400);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.height = 400;
      assertEquals(400, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-3377));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2156));
      aVLTree0.insert(1);
      aVLTree0.insert(3681);
      aVLTree0.delete(3681);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(3681);
      aVLTree0.delete(1);
      aVLTree0.find(512);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(1);
      aVLTree0.find(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.find((-2156));
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(187);
      aVLTree0.height();
      aVLTree0.insert(187);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(1484);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.delete(965);
      aVLTree0.find(0);
      aVLTree0.insert((-338));
      aVLTree0.find(1);
      aVLTree0.insert((-2344));
      aVLTree0.getRoot();
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avlTree.AVLTree", e);
      }
  }
}
